// Code generated by MockGen. DO NOT EDIT.
// Source: sender.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	issue "github.com/kubecano/cano-collector/pkg/core/issue"
)

// MockDestinationSenderInterface is a mock of DestinationSenderInterface interface.
type MockDestinationSenderInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDestinationSenderInterfaceMockRecorder
}

// MockDestinationSenderInterfaceMockRecorder is the mock recorder for MockDestinationSenderInterface.
type MockDestinationSenderInterfaceMockRecorder struct {
	mock *MockDestinationSenderInterface
}

// NewMockDestinationSenderInterface creates a new mock instance.
func NewMockDestinationSenderInterface(ctrl *gomock.Controller) *MockDestinationSenderInterface {
	mock := &MockDestinationSenderInterface{ctrl: ctrl}
	mock.recorder = &MockDestinationSenderInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDestinationSenderInterface) EXPECT() *MockDestinationSenderInterfaceMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockDestinationSenderInterface) Send(ctx context.Context, issue *issue.Issue) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, issue)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockDestinationSenderInterfaceMockRecorder) Send(ctx, issue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockDestinationSenderInterface)(nil).Send), ctx, issue)
}
