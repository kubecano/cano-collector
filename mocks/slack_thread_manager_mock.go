// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubecano/cano-collector/pkg/sender/interfaces (interfaces: SlackThreadManagerInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSlackThreadManagerInterface is a mock of SlackThreadManagerInterface interface.
type MockSlackThreadManagerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSlackThreadManagerInterfaceMockRecorder
}

// MockSlackThreadManagerInterfaceMockRecorder is the mock recorder for MockSlackThreadManagerInterface.
type MockSlackThreadManagerInterfaceMockRecorder struct {
	mock *MockSlackThreadManagerInterface
}

// NewMockSlackThreadManagerInterface creates a new mock instance.
func NewMockSlackThreadManagerInterface(ctrl *gomock.Controller) *MockSlackThreadManagerInterface {
	mock := &MockSlackThreadManagerInterface{ctrl: ctrl}
	mock.recorder = &MockSlackThreadManagerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSlackThreadManagerInterface) EXPECT() *MockSlackThreadManagerInterfaceMockRecorder {
	return m.recorder
}

// Cleanup mocks base method.
func (m *MockSlackThreadManagerInterface) Cleanup() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Cleanup")
}

// Cleanup indicates an expected call of Cleanup.
func (mr *MockSlackThreadManagerInterfaceMockRecorder) Cleanup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cleanup", reflect.TypeOf((*MockSlackThreadManagerInterface)(nil).Cleanup))
}

// GetThreadTS mocks base method.
func (m *MockSlackThreadManagerInterface) GetThreadTS(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetThreadTS", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetThreadTS indicates an expected call of GetThreadTS.
func (mr *MockSlackThreadManagerInterfaceMockRecorder) GetThreadTS(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThreadTS", reflect.TypeOf((*MockSlackThreadManagerInterface)(nil).GetThreadTS), arg0, arg1)
}

// InvalidateThread mocks base method.
func (m *MockSlackThreadManagerInterface) InvalidateThread(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InvalidateThread", arg0)
}

// InvalidateThread indicates an expected call of InvalidateThread.
func (mr *MockSlackThreadManagerInterfaceMockRecorder) InvalidateThread(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateThread", reflect.TypeOf((*MockSlackThreadManagerInterface)(nil).InvalidateThread), arg0)
}

// SetThreadTS mocks base method.
func (m *MockSlackThreadManagerInterface) SetThreadTS(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetThreadTS", arg0, arg1)
}

// SetThreadTS indicates an expected call of SetThreadTS.
func (mr *MockSlackThreadManagerInterfaceMockRecorder) SetThreadTS(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetThreadTS", reflect.TypeOf((*MockSlackThreadManagerInterface)(nil).SetThreadTS), arg0, arg1)
}
