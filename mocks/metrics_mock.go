// Code generated by MockGen. DO NOT EDIT.
// Source: metric.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockMetricsInterface is a mock of MetricsInterface interface.
type MockMetricsInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsInterfaceMockRecorder
}

// MockMetricsInterfaceMockRecorder is the mock recorder for MockMetricsInterface.
type MockMetricsInterfaceMockRecorder struct {
	mock *MockMetricsInterface
}

// NewMockMetricsInterface creates a new mock instance.
func NewMockMetricsInterface(ctrl *gomock.Controller) *MockMetricsInterface {
	mock := &MockMetricsInterface{ctrl: ctrl}
	mock.recorder = &MockMetricsInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsInterface) EXPECT() *MockMetricsInterfaceMockRecorder {
	return m.recorder
}

// ClearMetrics mocks base method.
func (m *MockMetricsInterface) ClearMetrics() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearMetrics")
}

// ClearMetrics indicates an expected call of ClearMetrics.
func (mr *MockMetricsInterfaceMockRecorder) ClearMetrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearMetrics", reflect.TypeOf((*MockMetricsInterface)(nil).ClearMetrics))
}

// IncAlertErrors mocks base method.
func (m *MockMetricsInterface) IncAlertErrors(alertName, errorType string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncAlertErrors", alertName, errorType)
}

// IncAlertErrors indicates an expected call of IncAlertErrors.
func (mr *MockMetricsInterfaceMockRecorder) IncAlertErrors(alertName, errorType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncAlertErrors", reflect.TypeOf((*MockMetricsInterface)(nil).IncAlertErrors), alertName, errorType)
}

// IncAlertsProcessed mocks base method.
func (m *MockMetricsInterface) IncAlertsProcessed(alertName, severity, source string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncAlertsProcessed", alertName, severity, source)
}

// IncAlertsProcessed indicates an expected call of IncAlertsProcessed.
func (mr *MockMetricsInterfaceMockRecorder) IncAlertsProcessed(alertName, severity, source interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncAlertsProcessed", reflect.TypeOf((*MockMetricsInterface)(nil).IncAlertsProcessed), alertName, severity, source)
}

// IncDestinationErrors mocks base method.
func (m *MockMetricsInterface) IncDestinationErrors(destinationName, destinationType, errorType string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncDestinationErrors", destinationName, destinationType, errorType)
}

// IncDestinationErrors indicates an expected call of IncDestinationErrors.
func (mr *MockMetricsInterfaceMockRecorder) IncDestinationErrors(destinationName, destinationType, errorType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncDestinationErrors", reflect.TypeOf((*MockMetricsInterface)(nil).IncDestinationErrors), destinationName, destinationType, errorType)
}

// IncDestinationMessagesSent mocks base method.
func (m *MockMetricsInterface) IncDestinationMessagesSent(destinationName, destinationType, status string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncDestinationMessagesSent", destinationName, destinationType, status)
}

// IncDestinationMessagesSent indicates an expected call of IncDestinationMessagesSent.
func (mr *MockMetricsInterfaceMockRecorder) IncDestinationMessagesSent(destinationName, destinationType, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncDestinationMessagesSent", reflect.TypeOf((*MockMetricsInterface)(nil).IncDestinationMessagesSent), destinationName, destinationType, status)
}

// IncRoutingDecisions mocks base method.
func (m *MockMetricsInterface) IncRoutingDecisions(teamName, destinationType, decision string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncRoutingDecisions", teamName, destinationType, decision)
}

// IncRoutingDecisions indicates an expected call of IncRoutingDecisions.
func (mr *MockMetricsInterfaceMockRecorder) IncRoutingDecisions(teamName, destinationType, decision interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncRoutingDecisions", reflect.TypeOf((*MockMetricsInterface)(nil).IncRoutingDecisions), teamName, destinationType, decision)
}

// IncTeamsMatched mocks base method.
func (m *MockMetricsInterface) IncTeamsMatched(teamName, alertName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncTeamsMatched", teamName, alertName)
}

// IncTeamsMatched indicates an expected call of IncTeamsMatched.
func (mr *MockMetricsInterfaceMockRecorder) IncTeamsMatched(teamName, alertName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncTeamsMatched", reflect.TypeOf((*MockMetricsInterface)(nil).IncTeamsMatched), teamName, alertName)
}

// IncWorkflowEnrichmentErrors mocks base method.
func (m *MockMetricsInterface) IncWorkflowEnrichmentErrors(workflowName, errorType string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncWorkflowEnrichmentErrors", workflowName, errorType)
}

// IncWorkflowEnrichmentErrors indicates an expected call of IncWorkflowEnrichmentErrors.
func (mr *MockMetricsInterfaceMockRecorder) IncWorkflowEnrichmentErrors(workflowName, errorType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncWorkflowEnrichmentErrors", reflect.TypeOf((*MockMetricsInterface)(nil).IncWorkflowEnrichmentErrors), workflowName, errorType)
}

// IncWorkflowsExecuted mocks base method.
func (m *MockMetricsInterface) IncWorkflowsExecuted(workflowName, status string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncWorkflowsExecuted", workflowName, status)
}

// IncWorkflowsExecuted indicates an expected call of IncWorkflowsExecuted.
func (mr *MockMetricsInterfaceMockRecorder) IncWorkflowsExecuted(workflowName, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncWorkflowsExecuted", reflect.TypeOf((*MockMetricsInterface)(nil).IncWorkflowsExecuted), workflowName, status)
}

// ObserveAlert mocks base method.
func (m *MockMetricsInterface) ObserveAlert(receiver, status string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ObserveAlert", receiver, status)
}

// ObserveAlert indicates an expected call of ObserveAlert.
func (mr *MockMetricsInterfaceMockRecorder) ObserveAlert(receiver, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveAlert", reflect.TypeOf((*MockMetricsInterface)(nil).ObserveAlert), receiver, status)
}

// ObserveAlertProcessingDuration mocks base method.
func (m *MockMetricsInterface) ObserveAlertProcessingDuration(alertName string, workflowCount int, duration time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ObserveAlertProcessingDuration", alertName, workflowCount, duration)
}

// ObserveAlertProcessingDuration indicates an expected call of ObserveAlertProcessingDuration.
func (mr *MockMetricsInterfaceMockRecorder) ObserveAlertProcessingDuration(alertName, workflowCount, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveAlertProcessingDuration", reflect.TypeOf((*MockMetricsInterface)(nil).ObserveAlertProcessingDuration), alertName, workflowCount, duration)
}

// ObserveDestinationSendDuration mocks base method.
func (m *MockMetricsInterface) ObserveDestinationSendDuration(destinationName, destinationType string, duration time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ObserveDestinationSendDuration", destinationName, destinationType, duration)
}

// ObserveDestinationSendDuration indicates an expected call of ObserveDestinationSendDuration.
func (mr *MockMetricsInterfaceMockRecorder) ObserveDestinationSendDuration(destinationName, destinationType, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveDestinationSendDuration", reflect.TypeOf((*MockMetricsInterface)(nil).ObserveDestinationSendDuration), destinationName, destinationType, duration)
}

// ObserveHTTPRequestDuration mocks base method.
func (m *MockMetricsInterface) ObserveHTTPRequestDuration(method, path, status string, duration time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ObserveHTTPRequestDuration", method, path, status, duration)
}

// ObserveHTTPRequestDuration indicates an expected call of ObserveHTTPRequestDuration.
func (mr *MockMetricsInterfaceMockRecorder) ObserveHTTPRequestDuration(method, path, status, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveHTTPRequestDuration", reflect.TypeOf((*MockMetricsInterface)(nil).ObserveHTTPRequestDuration), method, path, status, duration)
}

// ObserveWorkflowEnrichments mocks base method.
func (m *MockMetricsInterface) ObserveWorkflowEnrichments(workflowName string, enrichmentCount int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ObserveWorkflowEnrichments", workflowName, enrichmentCount)
}

// ObserveWorkflowEnrichments indicates an expected call of ObserveWorkflowEnrichments.
func (mr *MockMetricsInterfaceMockRecorder) ObserveWorkflowEnrichments(workflowName, enrichmentCount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveWorkflowEnrichments", reflect.TypeOf((*MockMetricsInterface)(nil).ObserveWorkflowEnrichments), workflowName, enrichmentCount)
}

// PrometheusMiddleware mocks base method.
func (m *MockMetricsInterface) PrometheusMiddleware() gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrometheusMiddleware")
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// PrometheusMiddleware indicates an expected call of PrometheusMiddleware.
func (mr *MockMetricsInterfaceMockRecorder) PrometheusMiddleware() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrometheusMiddleware", reflect.TypeOf((*MockMetricsInterface)(nil).PrometheusMiddleware))
}
