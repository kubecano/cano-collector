// Code generated by MockGen. DO NOT EDIT.
// Source: workflow_engine.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	workflow "github.com/kubecano/cano-collector/config/workflow"
	event "github.com/kubecano/cano-collector/pkg/core/event"
)

// MockWorkflowEngineInterface is a mock of WorkflowEngineInterface interface.
type MockWorkflowEngineInterface struct {
	ctrl     *gomock.Controller
	recorder *MockWorkflowEngineInterfaceMockRecorder
}

// MockWorkflowEngineInterfaceMockRecorder is the mock recorder for MockWorkflowEngineInterface.
type MockWorkflowEngineInterfaceMockRecorder struct {
	mock *MockWorkflowEngineInterface
}

// NewMockWorkflowEngineInterface creates a new mock instance.
func NewMockWorkflowEngineInterface(ctrl *gomock.Controller) *MockWorkflowEngineInterface {
	mock := &MockWorkflowEngineInterface{ctrl: ctrl}
	mock.recorder = &MockWorkflowEngineInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkflowEngineInterface) EXPECT() *MockWorkflowEngineInterfaceMockRecorder {
	return m.recorder
}

// ExecuteWorkflow mocks base method.
func (m *MockWorkflowEngineInterface) ExecuteWorkflow(workflow *workflow.WorkflowDefinition, event *event.AlertManagerEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteWorkflow", workflow, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteWorkflow indicates an expected call of ExecuteWorkflow.
func (mr *MockWorkflowEngineInterfaceMockRecorder) ExecuteWorkflow(workflow, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteWorkflow", reflect.TypeOf((*MockWorkflowEngineInterface)(nil).ExecuteWorkflow), workflow, event)
}

// SelectWorkflows mocks base method.
func (m *MockWorkflowEngineInterface) SelectWorkflows(event *event.AlertManagerEvent) []*workflow.WorkflowDefinition {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectWorkflows", event)
	ret0, _ := ret[0].([]*workflow.WorkflowDefinition)
	return ret0
}

// SelectWorkflows indicates an expected call of SelectWorkflows.
func (mr *MockWorkflowEngineInterfaceMockRecorder) SelectWorkflows(event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectWorkflows", reflect.TypeOf((*MockWorkflowEngineInterface)(nil).SelectWorkflows), event)
}
