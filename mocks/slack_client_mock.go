// Code generated by MockGen. DO NOT EDIT.
// Source: slack_client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	slack "github.com/slack-go/slack"
)

// MockSlackClientInterface is a mock of SlackClientInterface interface.
type MockSlackClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSlackClientInterfaceMockRecorder
}

// MockSlackClientInterfaceMockRecorder is the mock recorder for MockSlackClientInterface.
type MockSlackClientInterfaceMockRecorder struct {
	mock *MockSlackClientInterface
}

// NewMockSlackClientInterface creates a new mock instance.
func NewMockSlackClientInterface(ctrl *gomock.Controller) *MockSlackClientInterface {
	mock := &MockSlackClientInterface{ctrl: ctrl}
	mock.recorder = &MockSlackClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSlackClientInterface) EXPECT() *MockSlackClientInterfaceMockRecorder {
	return m.recorder
}

// AuthTest mocks base method.
func (m *MockSlackClientInterface) AuthTest() (*slack.AuthTestResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthTest")
	ret0, _ := ret[0].(*slack.AuthTestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthTest indicates an expected call of AuthTest.
func (mr *MockSlackClientInterfaceMockRecorder) AuthTest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthTest", reflect.TypeOf((*MockSlackClientInterface)(nil).AuthTest))
}

// GetConversationHistory mocks base method.
func (m *MockSlackClientInterface) GetConversationHistory(params *slack.GetConversationHistoryParameters) (*slack.GetConversationHistoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConversationHistory", params)
	ret0, _ := ret[0].(*slack.GetConversationHistoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConversationHistory indicates an expected call of GetConversationHistory.
func (mr *MockSlackClientInterfaceMockRecorder) GetConversationHistory(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConversationHistory", reflect.TypeOf((*MockSlackClientInterface)(nil).GetConversationHistory), params)
}

// GetConversations mocks base method.
func (m *MockSlackClientInterface) GetConversations(params *slack.GetConversationsParameters) ([]slack.Channel, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConversations", params)
	ret0, _ := ret[0].([]slack.Channel)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetConversations indicates an expected call of GetConversations.
func (mr *MockSlackClientInterfaceMockRecorder) GetConversations(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConversations", reflect.TypeOf((*MockSlackClientInterface)(nil).GetConversations), params)
}

// GetFileInfo mocks base method.
func (m *MockSlackClientInterface) GetFileInfo(fileID string, count, page int) (*slack.File, []slack.Comment, *slack.Paging, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileInfo", fileID, count, page)
	ret0, _ := ret[0].(*slack.File)
	ret1, _ := ret[1].([]slack.Comment)
	ret2, _ := ret[2].(*slack.Paging)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetFileInfo indicates an expected call of GetFileInfo.
func (mr *MockSlackClientInterfaceMockRecorder) GetFileInfo(fileID, count, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileInfo", reflect.TypeOf((*MockSlackClientInterface)(nil).GetFileInfo), fileID, count, page)
}

// PostMessage mocks base method.
func (m *MockSlackClientInterface) PostMessage(channelID string, options ...slack.MsgOption) (string, string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{channelID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostMessage", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PostMessage indicates an expected call of PostMessage.
func (mr *MockSlackClientInterfaceMockRecorder) PostMessage(channelID interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{channelID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostMessage", reflect.TypeOf((*MockSlackClientInterface)(nil).PostMessage), varargs...)
}

// UpdateMessage mocks base method.
func (m *MockSlackClientInterface) UpdateMessage(channelID, timestamp string, options ...slack.MsgOption) (string, string, string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{channelID, timestamp}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMessage", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// UpdateMessage indicates an expected call of UpdateMessage.
func (mr *MockSlackClientInterfaceMockRecorder) UpdateMessage(channelID, timestamp interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{channelID, timestamp}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMessage", reflect.TypeOf((*MockSlackClientInterface)(nil).UpdateMessage), varargs...)
}

// UploadFileV2 mocks base method.
func (m *MockSlackClientInterface) UploadFileV2(params slack.UploadFileV2Parameters) (*slack.FileSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFileV2", params)
	ret0, _ := ret[0].(*slack.FileSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadFileV2 indicates an expected call of UploadFileV2.
func (mr *MockSlackClientInterfaceMockRecorder) UploadFileV2(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFileV2", reflect.TypeOf((*MockSlackClientInterface)(nil).UploadFileV2), params)
}
