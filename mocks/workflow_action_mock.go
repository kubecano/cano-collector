// Code generated by MockGen. DO NOT EDIT.
// Source: actions.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	event "github.com/kubecano/cano-collector/pkg/core/event"
	interfaces "github.com/kubecano/cano-collector/pkg/workflow/actions/interfaces"
)

// MockWorkflowAction is a mock of WorkflowAction interface.
type MockWorkflowAction struct {
	ctrl     *gomock.Controller
	recorder *MockWorkflowActionMockRecorder
}

// MockWorkflowActionMockRecorder is the mock recorder for MockWorkflowAction.
type MockWorkflowActionMockRecorder struct {
	mock *MockWorkflowAction
}

// NewMockWorkflowAction creates a new mock instance.
func NewMockWorkflowAction(ctrl *gomock.Controller) *MockWorkflowAction {
	mock := &MockWorkflowAction{ctrl: ctrl}
	mock.recorder = &MockWorkflowActionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkflowAction) EXPECT() *MockWorkflowActionMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockWorkflowAction) Execute(ctx context.Context, event event.WorkflowEvent) (*interfaces.ActionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, event)
	ret0, _ := ret[0].(*interfaces.ActionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockWorkflowActionMockRecorder) Execute(ctx, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockWorkflowAction)(nil).Execute), ctx, event)
}

// GetName mocks base method.
func (m *MockWorkflowAction) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockWorkflowActionMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockWorkflowAction)(nil).GetName))
}

// Validate mocks base method.
func (m *MockWorkflowAction) Validate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockWorkflowActionMockRecorder) Validate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockWorkflowAction)(nil).Validate))
}

// MockActionExecutor is a mock of ActionExecutor interface.
type MockActionExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockActionExecutorMockRecorder
}

// MockActionExecutorMockRecorder is the mock recorder for MockActionExecutor.
type MockActionExecutorMockRecorder struct {
	mock *MockActionExecutor
}

// NewMockActionExecutor creates a new mock instance.
func NewMockActionExecutor(ctrl *gomock.Controller) *MockActionExecutor {
	mock := &MockActionExecutor{ctrl: ctrl}
	mock.recorder = &MockActionExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActionExecutor) EXPECT() *MockActionExecutorMockRecorder {
	return m.recorder
}

// CreateActionsFromConfig mocks base method.
func (m *MockActionExecutor) CreateActionsFromConfig(configs []interfaces.ActionConfig) ([]interfaces.WorkflowAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateActionsFromConfig", configs)
	ret0, _ := ret[0].([]interfaces.WorkflowAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateActionsFromConfig indicates an expected call of CreateActionsFromConfig.
func (mr *MockActionExecutorMockRecorder) CreateActionsFromConfig(configs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActionsFromConfig", reflect.TypeOf((*MockActionExecutor)(nil).CreateActionsFromConfig), configs)
}

// ExecuteAction mocks base method.
func (m *MockActionExecutor) ExecuteAction(ctx context.Context, action interfaces.WorkflowAction, event event.WorkflowEvent) (*interfaces.ActionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteAction", ctx, action, event)
	ret0, _ := ret[0].(*interfaces.ActionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteAction indicates an expected call of ExecuteAction.
func (mr *MockActionExecutorMockRecorder) ExecuteAction(ctx, action, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteAction", reflect.TypeOf((*MockActionExecutor)(nil).ExecuteAction), ctx, action, event)
}

// ExecuteActions mocks base method.
func (m *MockActionExecutor) ExecuteActions(ctx context.Context, actions []interfaces.WorkflowAction, event event.WorkflowEvent) ([]*interfaces.ActionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteActions", ctx, actions, event)
	ret0, _ := ret[0].([]*interfaces.ActionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteActions indicates an expected call of ExecuteActions.
func (mr *MockActionExecutorMockRecorder) ExecuteActions(ctx, actions, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteActions", reflect.TypeOf((*MockActionExecutor)(nil).ExecuteActions), ctx, actions, event)
}

// GetAction mocks base method.
func (m *MockActionExecutor) GetAction(actionType string) (interfaces.WorkflowAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAction", actionType)
	ret0, _ := ret[0].(interfaces.WorkflowAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAction indicates an expected call of GetAction.
func (mr *MockActionExecutorMockRecorder) GetAction(actionType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAction", reflect.TypeOf((*MockActionExecutor)(nil).GetAction), actionType)
}

// RegisterAction mocks base method.
func (m *MockActionExecutor) RegisterAction(actionType string, action interfaces.WorkflowAction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAction", actionType, action)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAction indicates an expected call of RegisterAction.
func (mr *MockActionExecutorMockRecorder) RegisterAction(actionType, action interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAction", reflect.TypeOf((*MockActionExecutor)(nil).RegisterAction), actionType, action)
}

// MockActionRegistry is a mock of ActionRegistry interface.
type MockActionRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockActionRegistryMockRecorder
}

// MockActionRegistryMockRecorder is the mock recorder for MockActionRegistry.
type MockActionRegistryMockRecorder struct {
	mock *MockActionRegistry
}

// NewMockActionRegistry creates a new mock instance.
func NewMockActionRegistry(ctrl *gomock.Controller) *MockActionRegistry {
	mock := &MockActionRegistry{ctrl: ctrl}
	mock.recorder = &MockActionRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActionRegistry) EXPECT() *MockActionRegistryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockActionRegistry) Create(config interfaces.ActionConfig) (interfaces.WorkflowAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", config)
	ret0, _ := ret[0].(interfaces.WorkflowAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockActionRegistryMockRecorder) Create(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockActionRegistry)(nil).Create), config)
}

// GetRegisteredTypes mocks base method.
func (m *MockActionRegistry) GetRegisteredTypes() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegisteredTypes")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetRegisteredTypes indicates an expected call of GetRegisteredTypes.
func (mr *MockActionRegistryMockRecorder) GetRegisteredTypes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegisteredTypes", reflect.TypeOf((*MockActionRegistry)(nil).GetRegisteredTypes))
}

// Register mocks base method.
func (m *MockActionRegistry) Register(actionType string, factory interfaces.ActionFactory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", actionType, factory)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockActionRegistryMockRecorder) Register(actionType, factory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockActionRegistry)(nil).Register), actionType, factory)
}

// MockActionFactory is a mock of ActionFactory interface.
type MockActionFactory struct {
	ctrl     *gomock.Controller
	recorder *MockActionFactoryMockRecorder
}

// MockActionFactoryMockRecorder is the mock recorder for MockActionFactory.
type MockActionFactoryMockRecorder struct {
	mock *MockActionFactory
}

// NewMockActionFactory creates a new mock instance.
func NewMockActionFactory(ctrl *gomock.Controller) *MockActionFactory {
	mock := &MockActionFactory{ctrl: ctrl}
	mock.recorder = &MockActionFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActionFactory) EXPECT() *MockActionFactoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockActionFactory) Create(config interfaces.ActionConfig) (interfaces.WorkflowAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", config)
	ret0, _ := ret[0].(interfaces.WorkflowAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockActionFactoryMockRecorder) Create(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockActionFactory)(nil).Create), config)
}

// GetActionType mocks base method.
func (m *MockActionFactory) GetActionType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActionType")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetActionType indicates an expected call of GetActionType.
func (mr *MockActionFactoryMockRecorder) GetActionType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActionType", reflect.TypeOf((*MockActionFactory)(nil).GetActionType))
}

// ValidateConfig mocks base method.
func (m *MockActionFactory) ValidateConfig(config interfaces.ActionConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateConfig", config)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateConfig indicates an expected call of ValidateConfig.
func (mr *MockActionFactoryMockRecorder) ValidateConfig(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateConfig", reflect.TypeOf((*MockActionFactory)(nil).ValidateConfig), config)
}
